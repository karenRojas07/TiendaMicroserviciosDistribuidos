events {
    worker_connections 1024;
}

http {
    # Configuración de upstreams apuntando a los contenedores

    upstream order_service {
        server order-service:3001;
        keepalive 32;
    }

    # Configuración de logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Servidor principal - API Gateway
    server {
        listen 80;
        server_name localhost;

        # Configuración general
        client_max_body_size 10M;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Headers comunes para todas las peticiones
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Connection "";


        # ==================== ÓRDENES ====================
        
        location /orders {
            proxy_pass http://order_service/orders;
        }

        location ~ ^/orders/([0-9]+)$ {
            proxy_pass http://order_service/orders/$1;
        }

        # ==================== HEALTH CHECK ====================
        
        location /health {
            access_log off;
            return 200 '{"status":"ok","message":"API Gateway APPTIENDA funcionando"}';
            add_header Content-Type application/json;
        }

        # ==================== ROOT ====================
        
        location = / {
            return 200 '{"message":"Bienvenido a APPTIENDA API Gateway","endpoints":["/products","/users","/orders","/health"]}';
            add_header Content-Type application/json;
        }

        # ==================== MANEJO DE ERRORES ====================
        
        location / {
            return 404 '{"error":"Endpoint no encontrado"}';
            add_header Content-Type application/json;
        }

        error_page 502 503 504 /50x.json;
        location = /50x.json {
            return 502 '{"error":"Servicio no disponible temporalmente"}';
            add_header Content-Type application/json;
        }
    }
}